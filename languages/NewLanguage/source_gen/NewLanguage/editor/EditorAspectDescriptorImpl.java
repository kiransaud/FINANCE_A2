package NewLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ATM_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Account_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AccountType_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Card_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Customer_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new FinancialInstitution_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new FinancialTransction_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ServiceOffered_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new TransctionType_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new ATMTransction_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new Account_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new AccountRefrence_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new AccounttypeRefrence_SubstituteMenu());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new CardRefrence_SubstituteMenu());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new CardTransction_SubstituteMenu());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new CustomerRefrence_SubstituteMenu());
      case 7:
        return Collections.<SubstituteMenu>singletonList(new ServiceRefrence_SubstituteMenu());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new TransctionTypeRefrence_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1d4L), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1c8L), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1c9L), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1d5L), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1d3L), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1c4L), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1cbL), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1c6L), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1cdL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1d1L), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1c8L), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1daL), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23465b2daL), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1dbL), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1d2L), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1dcL), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1ddL), MetaIdFactory.conceptId(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23465b2fdL)).seal();
}
