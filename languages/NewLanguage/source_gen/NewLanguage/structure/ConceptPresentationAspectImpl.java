package NewLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ATM;
  private ConceptPresentation props_ATMList;
  private ConceptPresentation props_ATMRefrence;
  private ConceptPresentation props_ATMTransction;
  private ConceptPresentation props_Account;
  private ConceptPresentation props_AccountRefrence;
  private ConceptPresentation props_AccountType;
  private ConceptPresentation props_AccounttypeRefrence;
  private ConceptPresentation props_Card;
  private ConceptPresentation props_CardList;
  private ConceptPresentation props_CardRefrence;
  private ConceptPresentation props_CardTransction;
  private ConceptPresentation props_Customer;
  private ConceptPresentation props_CustomerList;
  private ConceptPresentation props_CustomerRefrence;
  private ConceptPresentation props_FinancialInstitution;
  private ConceptPresentation props_FinancialTransction;
  private ConceptPresentation props_ListOfTransctionType;
  private ConceptPresentation props_ServiceOffered;
  private ConceptPresentation props_ServiceRefrence;
  private ConceptPresentation props_SetOfAccounType;
  private ConceptPresentation props_SetOfServiceOffered;
  private ConceptPresentation props_TransctionList;
  private ConceptPresentation props_TransctionType;
  private ConceptPresentation props_TransctionTypeRefrence;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ATM:
        if (props_ATM == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ATM = cpb.create();
        }
        return props_ATM;
      case LanguageConceptSwitch.ATMList:
        if (props_ATMList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ATMList = cpb.create();
        }
        return props_ATMList;
      case LanguageConceptSwitch.ATMRefrence:
        if (props_ATMRefrence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ATMRefrence");
          props_ATMRefrence = cpb.create();
        }
        return props_ATMRefrence;
      case LanguageConceptSwitch.ATMTransction:
        if (props_ATMTransction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1d1L, 0x6c5360f23465b316L, "atmused", "", "");
          props_ATMTransction = cpb.create();
        }
        return props_ATMTransction;
      case LanguageConceptSwitch.Account:
        if (props_Account == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Account = cpb.create();
        }
        return props_Account;
      case LanguageConceptSwitch.AccountRefrence:
        if (props_AccountRefrence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1daL, 0x6c5360f23465b35cL, "account", "", "");
          props_AccountRefrence = cpb.create();
        }
        return props_AccountRefrence;
      case LanguageConceptSwitch.AccountType:
        if (props_AccountType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AccountType = cpb.create();
        }
        return props_AccountType;
      case LanguageConceptSwitch.AccounttypeRefrence:
        if (props_AccounttypeRefrence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23465b2daL, 0x6c5360f23465b2dbL, "accounttype", "", "");
          props_AccounttypeRefrence = cpb.create();
        }
        return props_AccounttypeRefrence;
      case LanguageConceptSwitch.Card:
        if (props_Card == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Card = cpb.create();
        }
        return props_Card;
      case LanguageConceptSwitch.CardList:
        if (props_CardList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CardList = cpb.create();
        }
        return props_CardList;
      case LanguageConceptSwitch.CardRefrence:
        if (props_CardRefrence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1dbL, 0x6c5360f23465b35eL, "card", "", "");
          props_CardRefrence = cpb.create();
        }
        return props_CardRefrence;
      case LanguageConceptSwitch.CardTransction:
        if (props_CardTransction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1d2L, 0x6c5360f23465b318L, "cardused", "", "");
          props_CardTransction = cpb.create();
        }
        return props_CardTransction;
      case LanguageConceptSwitch.Customer:
        if (props_Customer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Customer = cpb.create();
        }
        return props_Customer;
      case LanguageConceptSwitch.CustomerList:
        if (props_CustomerList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CustomerList = cpb.create();
        }
        return props_CustomerList;
      case LanguageConceptSwitch.CustomerRefrence:
        if (props_CustomerRefrence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1dcL, 0x6c5360f23465b2d4L, "customer", "", "");
          props_CustomerRefrence = cpb.create();
        }
        return props_CustomerRefrence;
      case LanguageConceptSwitch.FinancialInstitution:
        if (props_FinancialInstitution == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FinancialInstitution = cpb.create();
        }
        return props_FinancialInstitution;
      case LanguageConceptSwitch.FinancialTransction:
        if (props_FinancialTransction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FinancialTransction");
          props_FinancialTransction = cpb.create();
        }
        return props_FinancialTransction;
      case LanguageConceptSwitch.ListOfTransctionType:
        if (props_ListOfTransctionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ListOfTransctionType = cpb.create();
        }
        return props_ListOfTransctionType;
      case LanguageConceptSwitch.ServiceOffered:
        if (props_ServiceOffered == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ServiceOffered = cpb.create();
        }
        return props_ServiceOffered;
      case LanguageConceptSwitch.ServiceRefrence:
        if (props_ServiceRefrence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1ddL, 0x6c5360f23464a21cL, "service", "", "");
          props_ServiceRefrence = cpb.create();
        }
        return props_ServiceRefrence;
      case LanguageConceptSwitch.SetOfAccounType:
        if (props_SetOfAccounType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SetOfAccounType = cpb.create();
        }
        return props_SetOfAccounType;
      case LanguageConceptSwitch.SetOfServiceOffered:
        if (props_SetOfServiceOffered == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SetOfServiceOffered = cpb.create();
        }
        return props_SetOfServiceOffered;
      case LanguageConceptSwitch.TransctionList:
        if (props_TransctionList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TransctionList = cpb.create();
        }
        return props_TransctionList;
      case LanguageConceptSwitch.TransctionType:
        if (props_TransctionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TransctionType = cpb.create();
        }
        return props_TransctionType;
      case LanguageConceptSwitch.TransctionTypeRefrence:
        if (props_TransctionTypeRefrence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23465b2fdL, 0x6c5360f23465b2feL, "transctiontype", "", "");
          props_TransctionTypeRefrence = cpb.create();
        }
        return props_TransctionTypeRefrence;
    }
    return null;
  }
}
