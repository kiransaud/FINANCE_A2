package NewLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Card_Constraints extends BaseConstraintsDescriptor {
  public Card_Constraints() {
    super(CONCEPTS.Card$nx);
  }

  public static class CardID_Property extends BasePropertyConstraintsDescriptor {
    public CardID_Property(ConstraintsDescriptor container) {
      super(PROPS.cardID$Sm3S, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:06f31464-a3b9-475c-942a-e516b15e210a(NewLanguage.constraints)", "7805689172545087707"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, final String propertyValue) {
      return Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getAllSiblings(node, false), CONCEPTS.Card$nx)).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return SPropertyOperations.getString(it, PROPS.cardID$Sm3S);
        }
      }).all(new IWhereFilter<String>() {
        public boolean accept(String it) {
          return !(Objects.equals(it, propertyValue));
        }
      });
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.cardID$Sm3S, new CardID_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Card$nx = MetaAdapterFactory.getConcept(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1d5L, "NewLanguage.structure.Card");
  }

  private static final class PROPS {
    /*package*/ static final SProperty cardID$Sm3S = MetaAdapterFactory.getProperty(0x1ae813028ade45f4L, 0xa93392ecb47fefa4L, 0x6c5360f23464a1d5L, 0x6c5360f23465b34dL, "cardID");
  }
}
